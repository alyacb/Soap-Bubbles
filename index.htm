<!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8">
  <title> Mandelbrot </title>
  <link rel="stylesheet" href="theme.css">
  <script src="fractals.js"></script>
 </head>
 <body onload="init()" onresize="init()">
  <div>
   <table><tr>
    <td style="width: 20%; padding-left: 10px; text-align: left;"> Soap Bubbles </td> <!-- title --> 
    <td style="padding-left: 10px; padding-right: 10px;"><table><tr> <!-- Pan -->
     <td><input type="text" id="x" value="0"></td>
     <td>+</td>
     <td><input type="text" id="y" value="0i"></td>
    </tr></table></td><!-- Zoom -->
    <td style="padding-left: 10px; padding-right: 10px;"><table><tr>
     <td><input id="zoom" type="text" value="100%"></td>
     <td class="button" id="zin"> + </td>
     <td class="button" id="zout"> - </td>
    </tr></table></td>
    <td><table><tr><!-- Tools -->
     <td class="button" onclick="toggle_div('info')"> ? </td> <!-- info -->
     <td class="button" onclick="toggle_div('settings')"> X </td> <!-- settings -->
    </tr></table></td>
    <td><table><tr><!-- Links -->
     <td><a href="index.htm">Reset</a></td> 
     <td><a href="https://github.com/hacktheverse/Soap-Bubbles" target="_blank">Source Code</a></td>
    </tr></table></td>
  </tr></table>
 </div>
  <div id="load" class="float">Loading...
   <input id="informer" value="draw" style="display: none;">
  </div>
  <div id="info" class="float">
   <h1> About </h1>
   <p> Soap Bubbles is a fractal-graphing website (and work in progress). Currently, you can explore the depths
       of a Mandelbrot fractal- just pan by clicking, zoom by double clicking (or using the nifty toolbar) - if you're
       very patient. Many features are on their way, so stay tuned for more exciting developments! </p>
   <p> P.S. It's called Soap Bubbles on account of the Mandelbrot Set's infamous bulbs reminding me of soap bubbles. </p>
   <br><hr><br>
   <p> Designed and Implemented by A.C.B. </p>
  </div>
  <div id="settings" class="float">
  <h1> Settings </h1>
  <table>
   <tr><td>
    <table>
     <tr><td>Number of Iterations:</td><td><input type="text" id="iter"></td></tr>
    </table></td>
    <td><table>
     <tr><td><p class="hint">*The default is 23, but 50+ iterations provides the fractal with a greater depth/resolution.</td></tr>
    </table></td>
   </tr>
  </table>
  <br><hr><br>
  <p> ... </p>
  </div>
  <script>
   var divTimer = -1;
   var divOn = null;

   /**
    * Toggle, in an animated fashion, the visibility of a div
    * @param {String} div_id - string id of div to be toggled
    */
   function toggle_div(div_id){
	if(divOn != null && divOn.id != div_id){
		divOn.style.opacity = 0;
		divOn.style.display = "none";
	}
	var div = document.getElementById(div_id);
	clear_divTimer();
        if(div.style.display!="block"){
                div.style.display="block";
                divTimer = setInterval(function() {
                        if(Number(div.style.opacity)<1){
                                div.style.opacity = Number(div.style.opacity) + 0.1;
                        } else {
                                clear_divTimer();
                        }
                }, 10);
        } else {
                divTimer = setInterval(function() {
                        if(Number(div.style.opacity)>0){
                                div.style.opacity = Number(div.style.opacity) - 0.1;
                        } else {
                                div.style.display = "none";
                                clear_divTimer();
				divOn = null;
                        }
                }, 10); 
        }
	divOn = div;
   }

   /**
    * Clears div timer, i.e. ends animation
    */
   function clear_divTimer(){
	if(divTimer != -1){
                clearInterval(divTimer);
                divTimer = -1;
        }   
   }

  </script>
  <canvas id="map"></canvas>
  <script>

   // initialize values, set up listeners
   var map = document.getElementById("map");
   var loading = document.getElementById("load");  
   // This element exists purely to 'inform' on the fractal's state, so that loading can react appropriately
   var informer = document.getElementById("informer");
   var zoomInput = document.getElementById("zoom");  
   var realInput = document.getElementById("x");
   var imInput = document.getElementById("y");
   var iterInput = document.getElementById("iter");

   map.addEventListener('dblclick', function() { fractal_zoom(2/3); });
   map.addEventListener("click", fractal_move);
   document.getElementById("zin").addEventListener("click", function() { fractal_zoom(2/3); });
   document.getElementById("zout").addEventListener("click", function() { fractal_zoom(3/2); });
   realInput.addEventListener("keyup", fractal_pan);
   imInput.addEventListener("keyup", fractal_pan);
   zoomInput.addEventListener("keyup", function(event) {
        if(event.keyCode == 13){ // enter key
                var input = zoomInput.value;
                var sym = input.indexOf("%");
                if(sym>0){
                        input = input.substring(0, sym);
                }
                if(!isNaN(input)){
                        zoom = 100/Number(input);
                }
                fractal_zoom(1);
        }
   });
   iterInput.addEventListener("keyup", function(event){
	if(event.keyCode == 13){ // enter key
		var input = iterInput.value;
		if(!isNaN(input)){
			max_iter = input;
		}
		fractal_draw();
	}
   });

   var timer = -1;
   var loadTimer = -1;
   var max_iter = 23;
   var width = window.innerWidth;
   var height = window.innerHeight;
   var zoom = 1;
   var xmin = -1;
   var xmax = 2.5;
   var ymin = -1;
   var ymax = 1;

   /**
    * Clears loadTimer, i.e. ends loading animation
    */
   function clear_loadTimer(){
	if(loadTimer != -1){
                clearInterval(loadTimer);
                loadTimer = -1;
        }	
   }

   /**
    * Shows loadTimer, in an animated way
    */
   function show_load(){
	clear_loadTimer();
	loadTimer = setInterval(function(){
		if(Number(loading.style.opacity)<1){
			loading.style.opacity = Number(loading.style.opacity) + 0.05;
		} else {
			clear_loadTimer();
		}
	}, 50);
   }

   /**
    * Hides loadTimer, in an animated way
    */
   function hide_load(){
	clear_loadTimer();
	loadTimer = setInterval(function() {
               	if(Number(loading.style.opacity)>0){
                       	loading.style.opacity = Number(loading.style.opacity) - 0.05;
               	} else {
                       	clear_loadTimer();
               	}
       	}, 50);
   }

   /**
    * Initializes fractal
    */
   function init() {
	width = window.innerWidth;
   	height = window.innerHeight;
   	map.width = width;
   	map.height = height;
	setInterval(function() {
		if(informer.value == "hide"){ // it is time to hide
               		informer.value="done";
                	clearInterval(timer);
                	timer = -1;
			hide_load();
        	}
	}, 100);
	fractal_draw();
   }

   /**
    * Draws fractal, canceling any other timers drawing on the map canvas
    */
   function fractal_draw() {
	show_load();	
	informer.value = "draw";
	realInput.value = (xmax + xmin)/2;
        imInput.value = (ymax + ymin)/2 + "i";
	zoomInput.value = Math.floor(100/zoom) + "%";
	iterInput.value = max_iter;

   	setTimeout(function(){
		clearInterval(timer);
		timer = -1;
		timer = graph(map, max_iter, zoom*xmin, zoom*xmax, zoom*ymin, zoom*ymax, informer);
	}, 1);
   }

   /**
    * Centers the fractal on the point clicked.
    * @param {Event} event - event triggering the move
    */
   function fractal_move(event) {
	if(event != null){
		var xrange = xmax - xmin;
		var yrange = ymax - ymin;
		var xf = (event.clientX-width/2)*xrange/width;
		var yf = (event.clientY-height/2)*yrange/height;
		xmin -= xf;
		xmax -= xf;
		ymin -= yf;
		ymax -= yf;
	}
	fractal_draw();
   }

   /**
    * Zooms fractal
    * @param {Number} factor - factor by which to decrease zoom
    */
   function fractal_zoom(factor) {
	if(factor <= 0){
		return;
	}
	zoom*=factor;
	fractal_draw();
   }

   /**
    * Pan action triggered by panning text boxes
    * @param {Event} event - event that tiggered pan
    */
   function fractal_pan(event){
	if(event.keyCode == 13){ // enter key
                var real = realInput.value;
		var imaginary = imInput.value;
                var sym = imaginary.indexOf("i");
                if(sym>0){
                        imaginary = imaginary.substring(0, sym);
                }
                if(!isNaN(imaginary) && !isNaN(real)){
                        var rdiff = real - (xmin + xmax)/2;
			rdiff/=zoom;
			var idiff = imaginary - (ymin + ymax)/2;
			idiff/=zoom;
			xmin -= rdiff;
			ymin += idiff;
			xmax -= rdiff;
			ymax += idiff;
                }
                fractal_move(null);
        }
   }

  </script>
 </body>
</html>
