<!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8">
  <title> Mandelbrot </title>
  <link rel="stylesheet" href="theme.css">
  <script src="fractals.js"></script>
 </head>
 <body onload="init()" onresize="init()">
  <div>
   <table><tr>
    <td style="width: 25%; padding-left: 10px; text-align: left;"> Soap Bubbles </td> <!-- title --> 
    <td><table><tr> <!-- zoom -->
     <td><input id="zoom" type="text" value="100%"></td>
     <td style="border-right: 1px solid #333333;" class="button" id="zin"> + </td>
     <td class="button" id="zout"> - </td>
    </tr></table>
    <td class="button" onmouseenter="toggle_info()" onmouseleave="toggle_info()"> ? </td> <!-- info -->
    <td><table><tr> <!-- links -->
     <td style="border-right: 1px solid #333333;"><a href="index.htm">Reset</a></td> 
     <td><a href="https://github.com/hacktheverse/Soap-Bubbles" target="_blank">Source Code</a></td>
    </tr></table></td>
   </tr></table>
  </div>
  <div id="load" class="float">Loading...
   <input id="informer" value="draw" style="display: none;">
  </div>
  <div id="info" class="float">
   <h1> Hello, Mortals. </h1>
   <p> This will be my spectacular description of what Soap Bubbles does... soonish. </p>
  </div>
  <script> // toolbar-related functions
   var info = true;
   var infoDiv = document.getElementById("info");   
   var infoTimer = -1;

   // show/hide info div
   function toggle_info() {
	clear_infoTimer();
        if(info){
		infoDiv.style.display="block";
                infoTimer = setInterval(function() {
			if(Number(infoDiv.style.opacity)<1){
                        	infoDiv.style.opacity = Number(infoDiv.style.opacity) + 0.1;
               		} else {
                        	clear_infoTimer();
                	}
		}, 10);
        } else {
		infoTimer = setInterval(function() {
                	if(Number(infoDiv.style.opacity)>0){
                        	infoDiv.style.opacity = Number(infoDiv.style.opacity) - 0.1;
                	} else {
				infoDiv.style.display = "none";
                        	clear_infoTimer();
                	}
		}, 10); 
        }
        info = !info;           
   }

   // stop show/hide infoTimer animation
   function clear_infoTimer() {
	if(infoTimer != -1){
                clearInterval(infoTimer);
                infoTimer = -1;
        }   
   }

  </script>
  <canvas id="map"></canvas>
  <script> // canvas-related functions

   // clears loadTimer (timer for loading display)
   function clear_loadTimer(){
	if(loadTimer != -1){
                clearInterval(loadTimer);
                loadTimer = -1;
        }	
   }

   // shows the load signal
   function show_load(){
	clear_loadTimer();
	loadTimer = setInterval(function(){
		if(Number(loading.style.opacity)<1){
			loading.style.opacity = Number(loading.style.opacity) + 0.05;
		} else {
			clear_loadTimer();
		}
	}, 50);
   }

   // hides the load signal, and clears timers
   function hide_load(){
	clear_loadTimer();
	loadTimer = setInterval(function() {
               	if(Number(loading.style.opacity)>0){
                       	loading.style.opacity = Number(loading.style.opacity) - 0.05;
               	} else {
                       	clear_loadTimer();
               	}
       	}, 50);
   }

   // initializes the width and height, triggered on loading and on resizing page
   function init() {
	width = window.innerWidth;
   	height = window.innerHeight;
   	map.width = width;
   	map.height = height;
	setInterval(function() {
		if(informer.value == "hide"){ // it is time to hide
               		informer.value="done";
                	clearInterval(timer);
                	timer = -1;
			hide_load();
        	}
	}, 100);
	fractal_draw();
   }

   // Redraws the fractal with the current parameters
   function fractal_draw() {
	show_load();	
	informer.value = "draw";

   	setTimeout(function(){
		clearInterval(timer);
		timer = -1;
		timer = graph(map, max_iter, zoom*xmin, zoom*xmax, zoom*ymin, zoom*ymax, informer);
	}, 1);
   }

   // Shifts the fractal so that the clicked point is at the center of the screen 
   function fractal_move(event) {
	var xrange = xmax - xmin;
	var yrange = ymax - ymin;
	var xf = (event.clientX-width/2)*xrange/width;
	var yf = (event.clientY-height/2)*yrange/height;
	xmin -= xf;
	xmax -= xf;
	ymin -= yf;
	ymax -= yf;
	fractal_draw();
   }

   // zooms out of the fractal by the factor given- for e.g., if factor < 1, zooms in
   //    else, zooms out
   function fractal_zoom(factor) {
	if(factor <= 0){
		return;
	}
	zoom*=factor;
	fractal_draw();
	zoomInput.value = Math.floor(100/zoom) + "%";
   }

   // initialize values, set up listeners

   var map = document.getElementById("map");
   var loading = document.getElementById("load");  
   // This element exists purely to 'inform' on the fractal's state, so that loading can react appropriately
   var informer = document.getElementById("informer");
   var zoomInput = document.getElementById("zoom");  

   map.addEventListener('dblclick', function() { fractal_zoom(2/3); });
   map.addEventListener("click", fractal_move);
   document.getElementById("zin").addEventListener("click", function() { fractal_zoom(2/3); });
   document.getElementById("zout").addEventListener("click", function() { fractal_zoom(3/2); });
   zoomInput.addEventListener("keyup", function(event) {
	if(event.keyCode == 13){ // enter key
		var input = zoomInput.value;
		var sym = input.indexOf("%");
		if(sym>0){
			input = input.substring(0, sym);
		}
		if(!isNaN(input)){
			zoom = 100/Number(input);
		}
		fractal_zoom(1);
	}
   });
   var timer = -1;
   var loadTimer = -1;
   var max_iter = 23;
   var width = window.innerWidth;
   var height = window.innerHeight;
   var zoom = 1;
   var xmin = -1;
   var xmax = 2.5;
   var ymin = -1;
   var ymax = 1;

  </script>
 </body>
</html>
